// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AspireOrchestrator.ScenarioTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PaymentProcessingFeature : object, Xunit.IClassFixture<PaymentProcessingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "PaymentProcessing", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PaymentProcessing.feature"
#line hidden
        
        public PaymentProcessingFeature(PaymentProcessingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Match IpStandard")]
        [Xunit.TraitAttribute("FeatureTitle", "PaymentProcessing")]
        [Xunit.TraitAttribute("Description", "Match IpStandard")]
        public async global::System.Threading.Tasks.Task MatchIpStandard()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Match IpStandard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Cvr",
                            "Cpr",
                            "LaborAgreementNumber",
                            "FromDate",
                            "ToDate",
                            "PaymentDate",
                            "PaymentReference",
                            "Amount",
                            "ReconcileStatus",
                            "Valid",
                            "CustomerNumber",
                            "TotalContributionRate",
                            "ContributionRateFromDate",
                            "EmploymentTerminationDate",
                            "SubmissionDate",
                            "DocumentType",
                            "ReceiptType"});
                table17.AddRow(new string[] {
                            "10008328",
                            "130250-0009",
                            "10000",
                            "2025-07-01",
                            "2025-07-31",
                            "2025-07-25",
                            "10008328",
                            "4796.56",
                            "Open",
                            "False",
                            "29247",
                            "10.95",
                            "2007-01-01",
                            "2016-06-01",
                            "2025-07-25",
                            "IpStandard",
                            "Payment"});
#line 6
await testRunner.GivenAsync("ReceiptDetail tabel indeholder", ((string)(null)), table17, "Given ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "ReconcileStatus",
                            "Amount",
                            "PaymentReference",
                            "AccountNumber",
                            "TrxDate",
                            "ValDate",
                            "Currency"});
                table18.AddRow(new string[] {
                            "Paid",
                            "4796.56",
                            "10008328",
                            "22768976202121",
                            "2025-07-25",
                            "2025-07-25",
                            "DKK"});
#line 10
await testRunner.GivenAsync("Deposit tabel indeholder", ((string)(null)), table18, "Given ");
#line hidden
#line 14
await testRunner.WhenAsync("IpStandard dokumenter er afstemt", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Cvr",
                            "Cpr",
                            "LaborAgreementNumber",
                            "FromDate",
                            "ToDate",
                            "PaymentDate",
                            "PaymentReference",
                            "Amount",
                            "ReconcileStatus",
                            "Valid",
                            "CustomerNumber",
                            "TotalContributionRate",
                            "ContributionRateFromDate",
                            "EmploymentTerminationDate",
                            "SubmissionDate",
                            "DocumentType",
                            "ReceiptType"});
                table19.AddRow(new string[] {
                            "10008328",
                            "130250-0009",
                            "10000",
                            "2025-07-01",
                            "2025-07-31",
                            "2025-07-25",
                            "10008328",
                            "4796.56",
                            "Paid",
                            "False",
                            "29247",
                            "10.95",
                            "2007-01-01",
                            "2016-06-01",
                            "2025-07-25",
                            "IpStandard",
                            "Payment"});
#line 15
await testRunner.ThenAsync("ReceiptDetail tabel indeholder", ((string)(null)), table19, "Then ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "ReconcileStatus",
                            "Amount",
                            "PaymentReference",
                            "AccountNumber",
                            "TrxDate",
                            "ValDate",
                            "Currency"});
                table20.AddRow(new string[] {
                            "Closed",
                            "4796.56",
                            "10008328",
                            "22768976202121",
                            "2025-07-25",
                            "2025-07-25",
                            "DKK"});
#line 19
await testRunner.ThenAsync("Deposit tabel indeholder", ((string)(null)), table20, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await PaymentProcessingFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await PaymentProcessingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
