// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AspireOrchestrator.ScenarioTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorkFlowFeature : object, global::Xunit.IClassFixture<WorkFlowFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "WorkFlow", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WorkFlow.feature"
#line hidden
        
        public WorkFlowFeature(WorkFlowFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/WorkFlow.feature", 5);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Receipt Workflow by event")]
        [global::Xunit.TraitAttribute("FeatureTitle", "WorkFlow")]
        [global::Xunit.TraitAttribute("Description", "Receipt Workflow by event")]
        [global::Xunit.TraitAttribute("Category", "tag1")]
        public async global::System.Threading.Tasks.Task ReceiptWorkflowByEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Receipt Workflow by event", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 6
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "DocumentType",
                            "Parameters"});
                table21.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "New",
                            "IpStandard",
                            "{\"id\":\"71f1d54b-09be-463c-8676-88c5097ce4dd\"}"});
#line 7
 await testRunner.GivenAsync("the following event", ((string)(null)), table21, "Given ");
#line hidden
#line 11
 await testRunner.WhenAsync("the next event is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "DocumentType",
                            "Parameters"});
                table22.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed",
                            "IpStandard",
                            "{\"id\":\"71f1d54b-09be-463c-8676-88c5097ce4dd\"}"});
                table22.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "New",
                            "IpStandard",
                            "{\"id\":\"71f1d54b-09be-463c-8676-88c5097ce4dd\"}"});
#line 13
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table22, "Then ");
#line hidden
#line 17
 await testRunner.WhenAsync("the next event is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState"});
                table23.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed"});
                table23.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "Completed"});
                table23.AddRow(new string[] {
                            "HandleReceipt",
                            "Validate",
                            "1",
                            "New"});
#line 19
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table23, "Then ");
#line hidden
#line 25
 await testRunner.WhenAsync("the next event is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState"});
                table24.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed"});
                table24.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "Completed"});
                table24.AddRow(new string[] {
                            "HandleReceipt",
                            "Validate",
                            "1",
                            "Completed"});
                table24.AddRow(new string[] {
                            "HandleReceipt",
                            "ProcessPayment",
                            "1",
                            "New"});
#line 27
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table24, "Then ");
#line hidden
#line 34
 await testRunner.WhenAsync("the next event is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState"});
                table25.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed"});
                table25.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "Completed"});
                table25.AddRow(new string[] {
                            "HandleReceipt",
                            "Validate",
                            "1",
                            "Completed"});
                table25.AddRow(new string[] {
                            "HandleReceipt",
                            "ProcessPayment",
                            "1",
                            "Completed"});
                table25.AddRow(new string[] {
                            "HandleReceipt",
                            "TransferResult",
                            "1",
                            "New"});
#line 36
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table25, "Then ");
#line hidden
#line 44
 await testRunner.WhenAsync("the next event is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "Completed"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "Validate",
                            "1",
                            "Completed"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "ProcessPayment",
                            "1",
                            "Completed"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "TransferResult",
                            "1",
                            "Completed"});
                table26.AddRow(new string[] {
                            "HandleReceipt",
                            "WorkFlowCompleted",
                            "1",
                            "Completed"});
#line 46
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table26, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Receipt Workflow by FlowId", Skip="Ignored")]
        [global::Xunit.TraitAttribute("FeatureTitle", "WorkFlow")]
        [global::Xunit.TraitAttribute("Description", "Receipt Workflow by FlowId")]
        [global::Xunit.TraitAttribute("Category", "tag1")]
        public async global::System.Threading.Tasks.Task ReceiptWorkflowByFlowId()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1",
                    "ignore"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Receipt Workflow by FlowId", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 57
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "FlowId"});
                table27.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "New",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
#line 58
 await testRunner.GivenAsync("the following event", ((string)(null)), table27, "Given ");
#line hidden
#line 62
 await testRunner.WhenAsync("the flow has been processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "FlowId"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "Receive",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "Parse",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "Validate",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "ProcessPayment",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "TransferResult",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
                table28.AddRow(new string[] {
                            "HandleReceipt",
                            "WorkFlowCompleted",
                            "1",
                            "Completed",
                            "f80664bb-fe2c-422e-afc5-17a4eb6529cb"});
#line 64
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table28, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Deposit Workflow by FlowId", Skip="Ignored")]
        [global::Xunit.TraitAttribute("FeatureTitle", "WorkFlow")]
        [global::Xunit.TraitAttribute("Description", "Deposit Workflow by FlowId")]
        public async global::System.Threading.Tasks.Task DepositWorkflowByFlowId()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Deposit Workflow by FlowId", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 75
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "FlowId"});
                table29.AddRow(new string[] {
                            "HandleDeposit",
                            "Receive",
                            "1",
                            "New",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
#line 76
 await testRunner.GivenAsync("the following event", ((string)(null)), table29, "Given ");
#line hidden
#line 80
 await testRunner.WhenAsync("the flow has been processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Event_Type",
                            "Process_State",
                            "TenantId",
                            "EventState",
                            "FlowId"});
                table30.AddRow(new string[] {
                            "HandleDeposit",
                            "Receive",
                            "1",
                            "Completed",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
                table30.AddRow(new string[] {
                            "HandleDeposit",
                            "Parse",
                            "1",
                            "Completed",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
                table30.AddRow(new string[] {
                            "HandleDeposit",
                            "ProcessPayment",
                            "1",
                            "Completed",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
                table30.AddRow(new string[] {
                            "HandleDeposit",
                            "TransferResult",
                            "1",
                            "Completed",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
                table30.AddRow(new string[] {
                            "HandleDeposit",
                            "WorkFlowCompleted",
                            "1",
                            "Completed",
                            "eb91261a-f9c0-4722-aa33-2e33d76186d6"});
#line 82
 await testRunner.ThenAsync("EventEntity table contains rows", ((string)(null)), table30, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await WorkFlowFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await WorkFlowFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
