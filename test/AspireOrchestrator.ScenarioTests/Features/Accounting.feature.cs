// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AspireOrchestrator.ScenarioTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AccountingFeature : object, Xunit.IClassFixture<AccountingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Accounting", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Accounting.feature"
#line hidden
        
        public AccountingFeature(AccountingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Full Accounting Flow")]
        [Xunit.TraitAttribute("FeatureTitle", "Accounting")]
        [Xunit.TraitAttribute("Description", "Full Accounting Flow")]
        public async global::System.Threading.Tasks.Task FullAccountingFlow()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Full Accounting Flow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.WhenAsync("IpStandard fil \"IP-standard 2025.txt\" er i storage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
 await testRunner.WhenAsync("filen er parset", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Cvr",
                            "Cpr",
                            "LaborAgreementNumber",
                            "FromDate",
                            "ToDate",
                            "PaymentDate",
                            "PaymentReference",
                            "Amount",
                            "ReconcileStatus",
                            "Valid",
                            "CustomerNumber",
                            "TotalContributionRate",
                            "ContributionRateFromDate",
                            "EmploymentTerminationDate",
                            "SubmissionDate",
                            "DocumentType",
                            "ReceiptType"});
                table1.AddRow(new string[] {
                            "10008328",
                            "130250-0009",
                            "10000",
                            "2025-07-01",
                            "2025-07-31",
                            "2025-07-25",
                            "10008328",
                            "4796.56",
                            "Open",
                            "False",
                            "29247",
                            "10.95",
                            "2007-01-01",
                            "2016-06-01",
                            "2025-07-25",
                            "IpStandard",
                            "Payment"});
#line 8
 await testRunner.ThenAsync("ReceiptDetail tabel indeholder", ((string)(null)), table1, "Then ");
#line hidden
#line 13
 await testRunner.WhenAsync("Camt53 fil \"Camt53 IP 2025.xml\" er i storage", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
 await testRunner.WhenAsync("filen er parset", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "ReconcileStatus",
                            "Amount",
                            "PaymentReference",
                            "AccountNumber",
                            "TrxDate",
                            "ValDate",
                            "Currency",
                            "ReconcileStatus"});
                table2.AddRow(new string[] {
                            "Paid",
                            "4796.56",
                            "10008328",
                            "22768976202121",
                            "2025-07-25",
                            "2025-07-25",
                            "DKK",
                            "Paid"});
#line 15
 await testRunner.ThenAsync("Deposit tabel indeholder", ((string)(null)), table2, "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "PostingDate",
                            "PostingPurpose"});
                table3.AddRow(new string[] {
                            "2025-07-25",
                            "Deposit received"});
#line 19
 await testRunner.ThenAsync("PostingJournal tabel indeholder", ((string)(null)), table3, "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "PostingAccount",
                            "AccountType",
                            "BankTrxDate",
                            "BankValDate",
                            "CreditAmount",
                            "DebitAmount",
                            "PostingDocumentType",
                            "Currency",
                            "PostingMessage"});
                table4.AddRow(new string[] {
                            "22768976202121",
                            "BankAccount",
                            "2025-07-25",
                            "2025-07-25",
                            "0",
                            "4796.56",
                            "Deposit",
                            "DKK",
                            "10008328"});
                table4.AddRow(new string[] {
                            "Offset",
                            "OffsetAccount",
                            "2025-07-25",
                            "2025-07-25",
                            "4796.56",
                            "0",
                            "Deposit",
                            "DKK",
                            "10008328"});
#line 23
 await testRunner.ThenAsync("PostingEntry tabel indeholder", ((string)(null)), table4, "Then ");
#line hidden
#line 28
 await testRunner.WhenAsync("IpStandard dokumenter er afstemt", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Cvr",
                            "Cpr",
                            "LaborAgreementNumber",
                            "FromDate",
                            "ToDate",
                            "PaymentDate",
                            "PaymentReference",
                            "Amount",
                            "ReconcileStatus"});
                table5.AddRow(new string[] {
                            "10008328",
                            "130250-0009",
                            "10000",
                            "2025-07-01",
                            "2025-07-31",
                            "2025-07-25",
                            "10008328",
                            "4796.56",
                            "Paid"});
#line 29
 await testRunner.ThenAsync("ReceiptDetail tabel indeholder", ((string)(null)), table5, "Then ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "ReconcileStatus",
                            "Amount",
                            "PaymentReference",
                            "AccountNumber",
                            "TrxDate",
                            "ValDate",
                            "Currency",
                            "ReconcileStatus"});
                table6.AddRow(new string[] {
                            "Closed",
                            "4796.56",
                            "10008328",
                            "22768976202121",
                            "2025-07-25",
                            "2025-07-25",
                            "DKK",
                            "Closed"});
#line 33
 await testRunner.ThenAsync("Deposit tabel indeholder", ((string)(null)), table6, "Then ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "PostingDate",
                            "PostingPurpose"});
                table7.AddRow(new string[] {
                            "2025-07-25",
                            "Deposit received"});
                table7.AddRow(new string[] {
                            "2025-07-25",
                            "Deposit closed"});
#line 37
 await testRunner.ThenAsync("PostingJournal tabel indeholder", ((string)(null)), table7, "Then ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "PostingAccount",
                            "AccountType",
                            "BankTrxDate",
                            "BankValDate",
                            "CreditAmount",
                            "DebitAmount",
                            "PostingDocumentType",
                            "Currency",
                            "PostingMessage"});
                table8.AddRow(new string[] {
                            "22768976202121",
                            "BankAccount",
                            "2025-07-25",
                            "2025-07-25",
                            "0",
                            "4796.56",
                            "Deposit",
                            "DKK",
                            "10008328"});
                table8.AddRow(new string[] {
                            "Offset",
                            "OffsetAccount",
                            "2025-07-25",
                            "2025-07-25",
                            "4796.56",
                            "0",
                            "Deposit",
                            "DKK",
                            "10008328"});
                table8.AddRow(new string[] {
                            "130250-0009",
                            "Person",
                            "2025-07-25",
                            "2025-07-25",
                            "0",
                            "4796.56",
                            "ReceiptDetail",
                            "DKK",
                            "10008328"});
                table8.AddRow(new string[] {
                            "22768976202121",
                            "BankAccount",
                            "2025-07-25",
                            "2025-07-25",
                            "4796.56",
                            "0",
                            "Deposit",
                            "DKK",
                            "Closing 10008328"});
#line 42
 await testRunner.ThenAsync("PostingEntry tabel indeholder", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AccountingFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AccountingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
